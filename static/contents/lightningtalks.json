{
  "stage": "prod_20180911",
  "data": [
    {
      "id": 1,
      "name": "Narisa Takita",
      "day": 1,
      "no": 5,
      "email": "takita@techbureau.jp",
      "avatar": "",
      "bio": "",
      "twitter": "",
      "url": "",
      "organization": "",
      "title": "暗号通貨技術・ブロックチェーン技術を活用するCrypto-Fintech Lab.",
      "abstract": "",
      "description": "",
      "notes": "",
      "audience_level": "",
      "tags": ""
    },
    {
      "id": 2,
      "name": "栗原理央",
      "day": 2,
      "no": 5,
      "email": "r.kurihara38@gmail.com",
      "avatar": "https://secure.gravatar.com/avatar/51c067076007dbb15baa23d41f803b10?s=500",
      "bio": "- 株式会社ブレインパッドに新卒として入社し、今年三年目\n- 学生時代は生化学専攻だったため、分析界隈のことはほぼ初心者で入社\n- 入社後は様々なPJに従事していく中で、「モノ/サービスが作りたい」と思うようになり、麻雀アプリ開発に着手\n- 趣味はもちろん麻雀",
      "twitter": "",
      "url": "http://blog.brainpad.co.jp/entry/2017/11/07/140000",
      "organization": "株式会社ブレインパッド",
      "title": "システム開発素人が深層学習を用いた画像認識で麻雀点数計算するLINEbot作った話",
      "abstract": "麻雀であがったときの牌の画像をLINEに送ると、自動で点数計算をしてくれるbotを（完全な趣味で）作った話をします。開発経緯から、画像収集、モデル構築、システムデプロイ等の一連の流れを麻雀という身近なテーマで苦労話も交えつつご紹介します。",
      "description": "# 開発に至った経緯\n- 私は麻雀が好きです。しかし、初心者の麻雀への敷居は高いです。少しでもハードルを下げたいという想いから、初心者アシスト機能を作りたくなった  \n- 深層学習のサービス適用や、MLシステムの継続的デリバリー等への興味も相まって、取り掛かりやすい点数自動計算システム開発に至りました  \n\n# 実施内容\n- 画像を収集するところから始め（iPhoneで撮影）、物体検出では深層学習やそれ以外の画像認識アルゴリズムを用いて試行錯誤し、結果的にはSSDを用いています\n- 利用の気軽さやグループトーク機能の活用を目指し、あえてスマホアプリではなくLINEbotを用いて開発しました\n- flaskとLINEAPI、herokuで実装・デプロイしました\n\n# オーディエンスへのメッセージ\n「自分が欲しいと思ったものを実際にモノとして作ることはとても楽しい、そしてそれは初心者でも可能」  \n「ML/DL×麻雀コミュニティ作ります、興味ある人募集中」",
      "notes": "- 資料は英語を含めて書きます。トークは日本語で行います",
      "audience_level": "All",
      "tags": "Web programming including frameworks (Django / Flask / Pylons etc.), Machine learning and data science"
    },
    {
      "id": 3,
      "name": "Pine Mizune",
      "day": 2,
      "no": 7,
      "email": "pinemz@gmail.com",
      "avatar": "https://secure.gravatar.com/avatar/842aaadff6e13fbf372c9b17b49b031c?s=500",
      "bio": "ウェブ系の会社で働いています。業務ではサーバーサイドと iOS/Android アプリの開発を行っています。",
      "twitter": "pine613",
      "url": "http://profile.pine.moe/",
      "organization": "nextbeat Co.Ltd.",
      "title": "asyncio + aiohttp で作るウェブサービス",
      "abstract": "Python 3.5 から async/await 構文が実装され、asyncio を用いた非同期処理が非常に記述しやすくなりました。asyncio を用いることで高パフォーマンスなウェブサービスを構築できますが、それにはフレームワークが対応している必要があります。\n\nこの LT では asyncio に対応したフレームワークである aiohttp を紹介します。次に aiomysql や aioamqp を併せて用い、実際に運用しているウェブサービスをコードを交えて紹介します。aiohttp でウェブサービスを構築するとはどういうことか、この LT で説明できたらと思います。",
      "description": "Python 3.5 から async/await 構文が実装され、asyncio を用いた非同期処理が非常に記述しやすくなりました。asyncio を用いることで、スレッドベースの並列化ではなく、イベントループベースの非同期処理が記述でき、高パフォーマンスなウェブサービスを構築できます。しかし、asyncio を用いてウェブサービスを作るには、フレームワーク側での対応が必要です。例えば、メジャーなフレームワークである Flask や Django などは対応していません。\n\nこの LT では、asyncio に対応したフレームワークである aiohttp を取り上げ、紹介します。aiohttp は asyncio とセットで使うことを前提としたフレームワークで、Python 3.5 以上で使うことができます。\n\n次に、aiohttp を用いて構築したウェブサービスである [絵文字ジェネレーター](https://emoji-gen.ninja) の紹介をします。ウェブサービスを構築するには、アプリケーション・サーバーだけではなく、データベースなどのミドルウェアとの連携が必要です。 絵文字ジェネレーターでは、asyncio に対応したライブラリを用い MySQL と RabbitMQ を組み合わせています。また、本番運用をする場合には組み込みのウェブサーバーではなく UWSGI や Gunicorn などを利用することになると思います。この辺も実際の事例を元に説明します。\n\nこの LT を通じて、asyncio でウェブサービスを作ったときの知見を共有できたらと思っています。",
      "notes": "",
      "audience_level": "Intermediate",
      "tags": "Web programming including frameworks (Django / Flask / Pylons etc.)"
    },
    {
      "id": 4,
      "name": "Takahiro Kato",
      "day": 2,
      "no": 3,
      "email": "dozo13189@gmail.com",
      "avatar": "https://secure.gravatar.com/avatar/b71a8e123136e1bd113cb9d337a364d4?s=500",
      "bio": "プログラミング × 投資 は今後10年でかなり熱い分野です。なぜなら、国をあげて「貯蓄から投資へ」をすすめているからです。\n現状、投資もプログラミングもできる人材は日本においてはかなり少ないです。しかし、確実に需要のあり、今後も需要が増えてくる分野です。\nこのLTをきっかけにこの分野でのプレイヤーが増やしたいです。",
      "twitter": "kabkansai",
      "url": "http://www.stockdog.work/",
      "organization": "Nonpublic information",
      "title": "Python ×  Investment ~投資信託をPythonで分析して、その結果を公開するサービス作った話~",
      "abstract": "投資信託という優れた金融商品があります。投資信託は優れた金融商品であるにも関わらず、日本ではマイナーです。また、金融庁は投資信託についてのかなり詳細の情報までXbrl形式（独特な形式!!）で公開していますが、そのことは残念ながら誰も知りません。\n\nマイナーな金融商品が誰にも知られていない場所で公開されているので、Pythonを使って大分析して、その結果をサービスとして公開しました。\n\n情報の取得にはselenium、requests、取得した情報の取込はBeautifulSoup4、分析はPandas、WebサーバーはFlaskとAll Pythonで挑んだサービスです。",
      "description": "# 作ったサービス\n投資のプロの判断を提供するサービスです。\nhttp://fmbrain.work/\n\n# どんなサービス？\n投資のプロであるファンドマネージャーが「買い」と判断した銘柄と株価がわかるサービスです。\n投資信託が買った銘柄（国内株式のみ）の現在株価が、その投資信託が取得したときの株価に近づいた場合(1%以内)に表示しています。\n\n# 投資信託って何？\nたくさんの株や債券を集めて作られた金融商品のセットのことです。何も難しいことはありません。\nたくさん株や債券を買うには、1人のお金では難しいため、たくさんの投資家からお金を集めています。\nたくさんのお金を集めて、たくさんの株や債券に投資をする、という形式をとった金融商品のことを投資信託と呼んでいます。\n\n# 公開されている投資信託の情報\n投資信託は、年に1回以上金融庁、投資家に向けて運用に関する情報を公開する義務があります。この公開されている情報は、EdinetというサイトでXbrl形式で公開されており、分析が可能な形で提供されています。これを分析し、サービスにて分析結果を公開しています。\n\n# Pythonの使いどころ\n1. スクレイピング : Selenium, Requests, BeautifulSoup4\n2. 分析 : Pandas\n3. Webサーバー : Flask",
      "notes": "",
      "audience_level": "All",
      "tags": "fund, investment, mutual fund"
    },
    {
      "id": 5,
      "name": "Jumpei Yoshimura",
      "day": 1,
      "no": 2,
      "email": "jumpyoshim@gmail.com",
      "avatar": "https://papercallio-production.s3.amazonaws.com/uploads/user/avatar/31032/image.jpeg",
      "bio": "",
      "twitter": "jumpyoshim",
      "url": "https://jumpyoshim.hatenablog.com/",
      "organization": "iRidge, Inc.",
      "title": "テキストマイニングによるTwitter個人アカウントの性格推定",
      "abstract": "「あなたこともっとよく知りたいの...」こんな酔狂な願いもPythonなら叶えてくれます。requests, gensim, scikit-learnなどPythonのライブラリを利用してTwitter個人アカウントの性格推定を試みます。",
      "description": "テキストマイニングによるTwitter個人アカウントの性格推定\n---\n- ツイートの収集（requests）\n- 文書分類器の作成\n  - 形態素解析（mecab-python3）\n  - 特徴ベクトルの作成（gensim）\n  - ツイートと性格ラベルの学習（scikit-learn）\n",
      "notes": "エゴグラムという性格診断手法があり、その特徴量をもつアカウントがTwitterには数多く存在します。そのTwitterアカウントのツイートと特徴量を正解データとし学習させ、性格不明のTwitterアカウントをツイートから推定します。その過程と結果を紹介します。時間が許せば、Webアプリケーションを作成し公開したいと思っています。",
      "audience_level": "All",
      "tags": "Python"
    },
    {
      "id": 6,
      "name": "平尾元紀(Motoki Hirao)",
      "day": 1,
      "no": 1,
      "email": "motoki.hirao@e-seikatsu.co.jp",
      "avatar": "https://papercallio-production.s3.amazonaws.com/uploads/user/avatar/30528/slack_icon.png",
      "bio": "* Python歴は趣味で触り始めてから3年くらい\n* PyCon JP 2017 をきっかけに株式会社いい生活に入社\n* Pythonと戯れる毎日\n* Pythonで競技プログラミングするのも好き",
      "twitter": "__yumechi",
      "url": "https://github.com/yumechi",
      "organization": "株式会社いい生活(e-Seikatsu, Inc)",
      "title": "PyCon JPで転職してみた人のホンネ",
      "abstract": "去るPyCon JP 2017、当時とある中小受託開発会社で働いていた私はPyCon JPを通して転職！現在楽しく毎日Pythonを書いています。\nそれまで趣味で自分用のツールをちょっと書いたり、データの集計にしか使っていなかった存在でしかなかったPythonとの関わり方が変わりました。\nPyCon JP 2017を通して株式会社いい生活と知り合い、Pythonを使ったWebサーバーAPI開発を通して感じたこと、Pythonでの開発ですごいと思ったところ、逆につらいなーと感じたところを赤裸々に話していきます！",
      "description": "これまで個人で書くときは文字列処理の強みを生かした競技プログラミングでの活用、ローカル環境でのbetter shell script的な使い方で文字列とスクレイピングを主に行ってきました。学生時代にはアンケート結果の分析も少しだけPythonを使ってみたり。\n転職してからPythonでWebサーバAPIを開発しています。個人で書いていた時には気が付かなかったPythonの書き方、そしてJavaやObjective-Cでしか開発したことなかった私がPythonで開発して感じたことをお話しします。\n\nPyCon JPに来ている趣味でPythonを書いている方々へPythonを使って開発をしていく可能性を伝えたいです。\n\nI belong to e-Seikatsu by PyCon JP 2017. I wrote some console tools and myself scraping tools by Python before work in e-Seikatsu. But I found out extra value Python with working as Python server engineer.\nI talk about myself python experience and engineering by Python.",
      "notes": "Nothing",
      "audience_level": "Beginner",
      "tags": "Anything else basically which doesn’t really fall into the types of topics above"
    },
    {
      "id": 7,
      "name": "Satoshi TAKAHASHI",
      "day": 1,
      "no": 4,
      "email": "sing.monotonyflower@gmail.com",
      "avatar": "https://secure.gravatar.com/avatar/1d1734819e0ada958fe53f5ac805fb38?s=500",
      "bio": "私は医師かつ医学研究者で、プログラミングについては初級者です。現在は主に医療用の画像を解析する研究を行なっています。医学研究というPython communityの外側からの視点で気づいたことについて発表したいと思っています。また、この発表を機にPython communityとより活発な交流を得ることができれば良いなと思っています。",
      "twitter": "s_s_satoc",
      "url": "https://qiita.com/s_s_satoc",
      "organization": "Department of Neurosurgery, The University of Tokyo, Tokyo, Japan",
      "title": "医学研究者が深層学習環境の立ち上げの際に苦労した話",
      "abstract": "このL.T.では医師かつ医学研究者の発表者が深層学習を含む機械学習環境を立ち上げる際に、つまづいた点、陥りやすいpit fallについて発表する。現在、医学研究においても多量のデータの解析は必須の時代になっている。そして多量のデータから推論を行う際に、機械学習は非常に有用である。しかし、その導入は非エンジニアには難易度が高いものとなっている。発表者は医学研究者であり、プログラミング自体は初級者である。機械学習が広まるに連れて今後、発表者の様な状況は増えると予想される。その際のトラブルシューティングとして本発表は有用であると考える。",
      "description": "現在、医学研究においても多量のデータの解析は必須の時代になっている。そして多量のデータから推論を行う際に、機械学習は非常に有用である。また、非情報系学科向けにオールインワンパッケージの深層学習向けマシンが販売されているが、発展著しい領域なので中身が古くなりがちである。\n故に研究で使用するには自力での環境構築が必要になるが、その導入は非エンジニアには難易度が高いものとなっている。\n\nそこで、発表者が実際にUbuntu 16.04 LTSにGPUを使用する深層学習環境を構築した際につまづいた点、陥りやすいpit fallについて発表する。\n具体的には以下の3点である\n1.NVIDIAドライバー、CUDA ToolkitとcuDNNのインストール\n2.pythonとDeep learningのpackage周り\n3.APC製のUPSの導入\n特に1についてドライバー、toolkitのアップデートが早く、直ぐに日本語の２次情報が古くなってしまうことが大きな問題であると思われた。",
      "notes": "プログラミングに関する学会での発表履歴はありません。今回が初になります。\n医学系の学会では発表多数です。\n昨年もSNO(Society for Neuro-Oncology)、脳神経外科学会総会を初め多数の学会で発表を行いました。\n必要であれば、その際に使用したスライド、abstractを提出できます。\nまた、今回の発表内容に近いものをQitaに投稿しています。https://qiita.com/s_s_satoc/items/17c5bd35c37f0f39c14c",
      "audience_level": "Beginner",
      "tags": "Python in education science and maths, Machine learning and data science"
    },
    {
      "id": 8,
      "name": "喜多智也",
      "day": 2,
      "no": 6,
      "email": "odan3240@gmail.com",
      "avatar": "https://secure.gravatar.com/avatar/00766b8e1f9c2665cf7fd29f9cf558df?s=500",
      "bio": "新卒1年目のエンジニアです。業務ではブロックチェーン関連のことをしています。\n学生時代は自然言語処理の研究をしていました。\n競技プログラミング、個人開発が趣味です。",
      "twitter": "odan3240",
      "url": "https://github.com/odanado",
      "organization": "株式会社モバイルファクトリー",
      "title": "【poke2vec】ポケモンの役割ベクトルの学習とその分析・可視化",
      "abstract": "自然言語処理ではword2vecと呼ばれる単語をベクトル化する手法が数多く提案されています。この手法は「単語の意味は前後の文脈から決定される」という仮説を元にしています。例えば「りんご」という単語が「果物」「赤い」などの単語と同時に使われていると軽く意味がわかりますよね。\n今回この仮説は単語以外にも応用できるのではないかと考え、ポケモンの対戦パーティに応用してみました。具体的にはポケモン6匹から構成される対戦パーティに対して、各ポケモンを単語とみなしてword2vecの手法を適用しました。得られたベクトルを分析・可視化した結果、対戦におけるポケモンの意味を学習できていることを確認できました。",
      "description": "## 背景\n自然言語処理ではword2vecと呼ばれる単語をベクトル化する手法が数多く提案されています。この手法は「単語の意味は前後の文脈から決定される」という仮説を元にしています。例えば「りんご」という単語が「果物」「赤い」などの単語と同時に使われていると軽く意味がわかりますよね。  \nこのword2vecによって生成されたベクトルを使って、ベクトル同士の加減算や類似度を計算することで、**意味に基づく単語の計算**が可能になります。有名なものとして「王」+「女」-「男」から「女王」を導くことができます。\n\n\n## 実験\nword2vecの手法にはContinuous Bag-of-Word Modelを使いました。これは周辺に現れる単語が与えられるので、中心にある単語を予測するモデルです。  \n今回は、6匹の対戦パーティ中5匹を与えた時に、残りの1匹を予測するように学習を行いました。\n実装にはPythonとNeural NetworksのフレームワークであるChainerを用いました。\n\n## データセットの構築\nPokémon Showdownと呼ばれるネット上で対戦をシミュレートできるサービスからスクレイピングして、データセットを構築しました。より具体的には対戦レーティングの上位500人の対戦ログを取得し、そこで使用された対戦パーティの情報を学習データとして用いました。\n\n## 分析・可視化\n学習されたベクトルの分析と可視化を行います。背景で挙げた単語の加減算と同様にポケモンの加減算を行った結果を紹介します。\nまたPrincipal Component Analysis (PCA) と呼ばれるベクトルを圧縮する手法を用いてベクトルを2次元と3次元に圧縮し、それぞれ2次元散布図と3次元散布図で可視化した様子も紹介します。\n\n## その他\nポケットモンスター・ポケモン・Pokémonは任天堂・クリーチャーズ・ゲームフリークの登録商標です。",
      "notes": "スライド及び発表には日本語を使用します。\n\nword2vecの単語以外の応用先として\"ユーザの購買履歴\"などが挙げられることはたまにありますが、ゲームに応用する話は聞いたことがありません。\nポケモンをテーマに機械学習をしている人は希少であり、機械学習に興味がある開発者に向けて、ポケモンという身近な応用先を示すことで、楽しんでいただけるのではないかと思っています。\n\n私の[ブログ](https://odanpoyo.github.io/2018/04/08/poke2vec/)に書いた内容をLT用に調整し、発表として盛り上がるように可視化の様子の動画をスライドに盛り込む予定です。\n",
      "audience_level": "All",
      "tags": "Machine learning and data science"
    },
    {
      "id": 9,
      "name": "康裕三",
      "day": 2,
      "no": 1,
      "email": "yooska14@gmail.com",
      "avatar": "https://secure.gravatar.com/avatar/d31ab69305ee3a1682d33c0325dfcaf4?s=500",
      "bio": "",
      "twitter": "quantx_factory",
      "url": "https://quantx.io/",
      "organization": "株式会社Smart Trade",
      "title": "安全なサンドボックス構築の裏側 ~投資アルゴリズム構築環境QuantX Factoryの事例~",
      "abstract": "私たちは、「クラウド上でアルゴリズムを開発・実行できるプラットフォーム」であるQuantX Factoryを運営しています。QuantX Factoryは、クラウド上で動作する以上、様々なセキュリティ対応やリソース制限について考慮される必要があります。\nでは、そういった要件はどのようにクリアされているのでしょうか。\n今回は、QuantX Factoryの例を用いて、\n\n- 安全なSandboxはどのように実装されるか\n- どのような問題があって、それぞれどのように対処されているのか\n- 攻撃者（クラッカー）はどのような思考で攻撃するのか\n\nを整理し、プロダクト構築の全体像を追っていきます。",
      "description": "QuantX Factoryのような「Web上でユーザのプログラムを実行するようなサービス」を作ろうとすると、様々な問題に対処しなければなりません。\nこのトークでは、そんなサービスで必要とされるセキュリティ要件やサービス要件を整理 し、実際にどんな設計・コンセプトで開発されているか紹介します。\n\n普段あまり触れる機会のない、セキュリティやインフラ構築について知見を深めることができます。",
      "notes": "QuantX Factoryは、クラウド上で動作するPythonの実行環境を通して、Pythonユーザにより豊かな学習環境を提供したいと考えています。そんなQuantX Factoryの裏側を知ることは、Pythonユーザにとって非常に有意義であり、コミュニティへの次なるコントリビュータ（貢献者）を育むことに繋がると考えています。",
      "audience_level": "Intermediate",
      "tags": "Project case studies, Fintech, Sandbox, Security, Python"
    },
    {
      "id": 10,
      "name": "Marc-Andre Lemburg",
      "day": 1,
      "no": 3,
      "email": "marc-andre@p9ft.com",
      "avatar": "https://secure.gravatar.com/avatar/6b3dec5506b5d102cd676aa4e92e54d6?s=500",
      "bio": "Marc-Andre is the CEO and founder of eGenix.com, a Python-focused project and consulting company based in Germany. He has a degree in mathematics from the University of Düsseldorf.\n\nHis work with and for Python started in 1994. He is a Python Core Developer, designed and implemented the Unicode support in Python 2.0, and author of the mx Extensions, e.g. mxTools, mxDateTime and mxODBC, which are now distributed and maintained through eGenix.com.\n\nMarc-Andre is EuroPython Society (EPS) Chair, a Python Software Foundation (PSF) founding Fellow and co-founded a local Python meeting in Düsseldorf (PyDDF). He served on the board of the PSF and EPS for many terms and loves to contribute to the growth of Python where ever he can.\n\nMore information is available on http://malemburg.com/",
      "twitter": "malemburg",
      "url": "http://malemburg.com/",
      "organization": "MUFG Investor Services",
      "title": "Why your Django account registration should use a Turing test...",
      "abstract": "... or why getting 30,000 user accounts in 3 days is not always what you want.",
      "description": "This is a short talk about something that happened in the run up to EuroPython 2018. Our standard Django user registration page had been highjacked by spammers who happily created create thousands of accounts in our system.\n\nThe resulting cleanup many hours, since the registration opt-in emails bounced, with the bounces going into a helpdesk system, creating tickets, sending out ticket replies, which again bounced, etc. etc.\n\nOur solution was to add a simple text based Turing test to the page.",
      "notes": "This really is a lightning talk, unlike the two other talks I have submitted :-)\n\nMany thanks,\n--\nMarc-Andre Lemburg",
      "audience_level": "All",
      "tags": "Web programming including frameworks (Django / Flask / Pylons etc.), Best practices, Community building and human interaction"
    },
    {
      "id": 11,
      "name": "yoshikatsu.tada",
      "day": 2,
      "no": 2,
      "email": "yoshikatsu.tada@e-seikatsu.co.jp",
      "avatar": "https://secure.gravatar.com/avatar/af2c0627c22423a5714b61e2b1a839a3?s=500",
      "bio": "* （株）いい生活　サーバサイドエンジニア\n    * flask + celery で構成されるマイクロサービス群（API）で2300スキーマと戦っています\n* Python歴2年\n* エンジニア歴1年\n* https://github.com/ta-dadadada",
      "twitter": "ta_dadadada",
      "url": "https://customer.e-bukken-1.com/download",
      "organization": "株式会社いい生活",
      "title": "diff 最小化原理で導く Zen of Python",
      "abstract": "*There should be one-- and preferably only one --obvious way to do it.*\n「やり方はたったひとつ」という `Zen of Python` の一節です。\n魅力的ではありつつも暴力的なこの哲学を、ソフトウェア品質という観点から、\n変分原理という道具を使って、解きほぐしてみようと思います。\n変更に対する強さがソフトウェアの「良さ」を表すとすれば、\n将来の変更に関して修正が少なければ「良いソフトウェア」であるはずです。\nだとすると、「将来」あるべき姿に近いものが今あるべき姿なのではないか、\nというのがこのトークの根底にある発想です。",
      "description": "ソフトウェア品質の観点では、将来の仕様変更/機能追加に対して修正そのもの、そして修正コストを最小化できるソフトウェアが「良いソフトウェア」といえます。\nこれを「 diff 最小化の原理」と呼ぶことにします。\nこのとき、ソフトウェアが将来あるべき姿から逆算すると、将来のとある地点に向けて、\n最小の diff で到達できるソフトウェアが最も優れたソフトウェアであり、そのようなソフトウェアの可能性はそんなに多くないであろうことが予想されます。\n今回のトークでは、このように特に「将来の機能開発」に重点を置いてソフトウェア品質について考え、それを Zen of Python と結び付けつつ、\n*There should be one-- and preferably only one --obvious way to do it.* という精神が表すものについてお話ししたいと考えています。",
      "notes": "Speaker 来歴\n\n* （株）いい生活　サーバサイドエンジニア\n    * flask + celery で構成されるマイクロサービス群（API）で2300スキーマと戦っています\n* Python歴2年\n* エンジニア歴1年\n* https://github.com/ta-dadadada",
      "audience_level": "All",
      "tags": "哲学, お話, ZenOfPython, Zen"
    },
    {
      "id": 12,
      "name": "しまかぜsoft",
      "day": 2,
      "no": 4,
      "email": "shimakaze.soft@gmail.com",
      "avatar": "https://papercallio-production.s3.amazonaws.com/uploads/user/avatar/29025/EY16ro48_400x400.jpg",
      "bio": "主にPythonで仕事をしている二年目のサーバーサイドエンジニアです。最近フリーランスのエンジニアに転校し、Iotのサーバーサイドを担当しています。\n仕事では今までDjango, Falcon, Flaskなどを使ってAPIの開発などを行ってきて、関わったプロジェクトでFalconのシンプルな構成が気に入り、現在一人でドキュメントの翻訳作業を進めている最中です。\n\n仕事以外では自分のWEBサービスを運用しており、バックエンドのAPI部分でFalconを使っています。",
      "twitter": "shimakaze_soft",
      "url": "http://shimakaze-tech.hatenablog.com",
      "organization": "djangoja",
      "title": "Pythonの軽量フレームワークによるシンプルで高速なWebAPIの作り方",
      "abstract": "Pythonの軽量フレームワークの一つであるFalconを使ってWebAPIの作り方についてのお話します。\nFalconの概要と使い方、Python製の他フレームワークとの比較、便利なサードパーティー製モジュールなどもご紹介していきます。",
      "description": "昨今、マイクロサービス化が進んでおり、フルスタックフレームワーク以外でWebAPIを作る機会があると思います。\nPythonでWebAPIを作る場合、主な選択してはDjango Rest Frameworkがあり、他にもFlask, Bottle, Pyramidなどがあります。これらのフレームワークよりも軽量で高速なフレームワークであるFalconを使ってのWebAPIの作り方を紹介していきます。\n\n",
      "notes": "http://shimakaze-tech.hatenablog.com/entry/2018/05/27/174123\nhttps://qiita.com/shimakaze_soft/items/166071b17dd286e8913b\n\n上記のブログとQiitaでFalconの日本語ドキュメントへの翻訳とFalconを使った実装方法など進めており、それに沿った内容を発表していきます。\n発表は日本語で行う予定です。",
      "audience_level": "Beginner",
      "tags": "Web programming including frameworks (Django / Flask / Pylons etc.)"
    },
    {
      "id": 13,
      "name": "ryo kato",
      "day": 2,
      "no": 8,
      "email": "ryo.kato23@gmail.com",
      "avatar": "https://secure.gravatar.com/avatar/916800286dc6251c84b3e128c765e9dc?s=500",
      "bio": "日本経済新聞社　 API・基盤開発 python / Elasticsearch",
      "twitter": "ryoo17",
      "url": "",
      "organization": "日本経済新聞社",
      "title": "PyCon JP 傾向と対策",
      "abstract": "2015〜2018のPyCon JPで応募されたプロポーザルと採択されたものを分析して、これまでと今年のPyConJPを勝手に振り返ります。\nそこから見えて来た傾向からPyConJP2019で採択されるための対策の話もします。",
      "description": "PyConJPでプロポーザルが採択されるのは中々の倍率をくぐり抜ける必要があります。\nそこで、どういうトークが募集されて選ばれてきたか傾向と来年採択される確率をあげるにはどう対策すればいいかを、これまでの2015年以降のプロポーザルをスクレイピング・テキスト分析して見つけていこうと思います",
      "notes": "",
      "audience_level": "All",
      "tags": "Anything else basically which doesn’t really fall into the types of topics above"
    }
  ]
}